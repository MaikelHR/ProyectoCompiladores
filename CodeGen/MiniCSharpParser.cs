//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ProyectoCompi/Grammar/MiniCSharpParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT_LINE=1, COMMENT_BLOCK=2, WS=3, ID=4, INT=5, DOUBLE=6, CHAR=7, 
		STRING=8, ASSIGN=9, RELOP=10, ADDOP=11, MULOP=12, LOGOP=13, CLASS=14, 
		IF=15, ELSE=16, WHILE=17, RETURN=18, INT_TYPE=19, CHAR_TYPE=20, DOUBLE_TYPE=21, 
		BOOL_TYPE=22, STRING_TYPE=23, BOOL=24, LBRACE=25, RBRACE=26, LPAREN=27, 
		RPAREN=28, LBRACK=29, RBRACK=30, SEMICOLON=31, COMMA=32;
	public const int
		RULE_program = 0, RULE_classDecl = 1, RULE_classBody = 2, RULE_varDecl = 3, 
		RULE_methodDecl = 4, RULE_paramList = 5, RULE_param = 6, RULE_block = 7, 
		RULE_stmt = 8, RULE_exprStmt = 9, RULE_expr = 10, RULE_argList = 11, RULE_literal = 12, 
		RULE_type = 13, RULE_innerClassDecl = 14;
	public static readonly string[] ruleNames = {
		"program", "classDecl", "classBody", "varDecl", "methodDecl", "paramList", 
		"param", "block", "stmt", "exprStmt", "expr", "argList", "literal", "type", 
		"innerClassDecl"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'='", null, null, 
		null, null, "'class'", "'if'", "'else'", "'while'", "'return'", "'int'", 
		"'char'", "'double'", "'bool'", "'string'", null, "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT_LINE", "COMMENT_BLOCK", "WS", "ID", "INT", "DOUBLE", "CHAR", 
		"STRING", "ASSIGN", "RELOP", "ADDOP", "MULOP", "LOGOP", "CLASS", "IF", 
		"ELSE", "WHILE", "RETURN", "INT_TYPE", "CHAR_TYPE", "DOUBLE_TYPE", "BOOL_TYPE", 
		"STRING_TYPE", "BOOL", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", 
		"RBRACK", "SEMICOLON", "COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				classDecl();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			State = 35;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(CLASS);
			State = 38;
			Match(ID);
			State = 39;
			Match(LBRACE);
			State = 40;
			classBody();
			State = 41;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerClassDeclContext[] innerClassDecl() {
			return GetRuleContexts<InnerClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerClassDeclContext innerClassDecl(int i) {
			return GetRuleContext<InnerClassDeclContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << CLASS) | (1L << INT_TYPE) | (1L << CHAR_TYPE) | (1L << DOUBLE_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE))) != 0)) {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 43;
					varDecl();
					}
					break;
				case 2:
					{
					State = 44;
					methodDecl();
					}
					break;
				case 3:
					{
					State = 45;
					innerClassDecl();
					}
					break;
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			type(0);
			State = 52;
			Match(ID);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 53;
				Match(ASSIGN);
				State = 54;
				expr(0);
				}
			}

			State = 57;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			type(0);
			State = 60;
			Match(ID);
			State = 61;
			Match(LPAREN);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT_TYPE) | (1L << CHAR_TYPE) | (1L << DOUBLE_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE))) != 0)) {
				{
				State = 62;
				paramList();
				}
			}

			State = 65;
			Match(RPAREN);
			State = 66;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 10, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			param();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 69;
				Match(COMMA);
				State = 70;
				param();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 12, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			type(0);
			State = 77;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(LBRACE);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING) | (1L << IF) | (1L << WHILE) | (1L << RETURN) | (1L << INT_TYPE) | (1L << CHAR_TYPE) | (1L << DOUBLE_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE) | (1L << BOOL) | (1L << LBRACE) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 80;
				stmt();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				exprStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				Match(IF);
				State = 92;
				Match(LPAREN);
				State = 93;
				expr(0);
				State = 94;
				Match(RPAREN);
				State = 95;
				stmt();
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 96;
					Match(ELSE);
					State = 97;
					stmt();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 100;
				Match(WHILE);
				State = 101;
				Match(LPAREN);
				State = 102;
				expr(0);
				State = 103;
				Match(RPAREN);
				State = 104;
				stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 106;
				Match(RETURN);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING) | (1L << BOOL) | (1L << LPAREN))) != 0)) {
					{
					State = 107;
					expr(0);
					}
				}

				State = 110;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			expr(0);
			State = 114;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MiniCSharpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MiniCSharpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULOP() { return GetToken(MiniCSharpParser.MULOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDOP() { return GetToken(MiniCSharpParser.ADDOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOP() { return GetToken(MiniCSharpParser.RELOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGOP() { return GetToken(MiniCSharpParser.LOGOP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 117;
				Match(ID);
				State = 118;
				Match(LPAREN);
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING) | (1L << BOOL) | (1L << LPAREN))) != 0)) {
					{
					State = 119;
					argList();
					}
				}

				State = 122;
				Match(RPAREN);
				}
				break;
			case 2:
				{
				State = 123;
				Match(ID);
				}
				break;
			case 3:
				{
				State = 124;
				literal();
				}
				break;
			case 4:
				{
				State = 125;
				Match(LPAREN);
				State = 126;
				expr(0);
				State = 127;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 143;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 131;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 132;
						Match(MULOP);
						State = 133;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 134;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 135;
						Match(ADDOP);
						State = 136;
						expr(8);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 137;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 138;
						Match(RELOP);
						State = 139;
						expr(7);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 140;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 141;
						Match(LOGOP);
						State = 142;
						expr(6);
						}
						break;
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 22, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			expr(0);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 149;
				Match(COMMA);
				State = 150;
				expr(0);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCSharpParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MiniCSharpParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MiniCSharpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MiniCSharpParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << CHAR) | (1L << STRING) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_TYPE() { return GetToken(MiniCSharpParser.INT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_TYPE() { return GetToken(MiniCSharpParser.CHAR_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_TYPE() { return GetToken(MiniCSharpParser.DOUBLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_TYPE() { return GetToken(MiniCSharpParser.BOOL_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(MiniCSharpParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_TYPE:
				{
				State = 159;
				Match(INT_TYPE);
				}
				break;
			case CHAR_TYPE:
				{
				State = 160;
				Match(CHAR_TYPE);
				}
				break;
			case DOUBLE_TYPE:
				{
				State = 161;
				Match(DOUBLE_TYPE);
				}
				break;
			case BOOL_TYPE:
				{
				State = 162;
				Match(BOOL_TYPE);
				}
				break;
			case STRING_TYPE:
				{
				State = 163;
				Match(STRING_TYPE);
				}
				break;
			case ID:
				{
				State = 164;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 167;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 168;
					Match(LBRACK);
					State = 169;
					Match(RBRACK);
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InnerClassDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public InnerClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerClassDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.EnterInnerClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCSharpParserListener typedListener = listener as IMiniCSharpParserListener;
			if (typedListener != null) typedListener.ExitInnerClassDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerClassDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerClassDeclContext innerClassDecl() {
		InnerClassDeclContext _localctx = new InnerClassDeclContext(Context, State);
		EnterRule(_localctx, 28, RULE_innerClassDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(CLASS);
			State = 176;
			Match(ID);
			State = 177;
			Match(LBRACE);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT_TYPE) | (1L << CHAR_TYPE) | (1L << DOUBLE_TYPE) | (1L << BOOL_TYPE) | (1L << STRING_TYPE))) != 0)) {
				{
				{
				State = 178;
				varDecl();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expr_sempred((ExprContext)_localctx, predIndex);
		case 13: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\"', '\xBD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x6', '\x2', '\"', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '#', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x31', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x34', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ':', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x42', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'M', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', 'T', '\n', '\t', '\f', '\t', '\xE', '\t', 'W', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x65', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', 'o', '\n', '\n', '\x3', '\n', '\x5', '\n', 'r', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x84', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x92', 
		'\n', '\f', '\f', '\f', '\xE', '\f', '\x95', '\v', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x9A', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x9D', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xA8', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xAD', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xB0', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xB6', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xB9', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x2', '\x4', '\x16', '\x1C', '\x11', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		'\x2', '\x3', '\x4', '\x2', '\a', '\n', '\x1A', '\x1A', '\x2', '\xCC', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x32', '\x3', '\x2', '\x2', '\x2', '\b', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x12', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 's', '\x3', '\x2', '\x2', '\x2', '\x16', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xB1', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', 
		'\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\x2', 
		'\x2', '\x3', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		'\x10', '\x2', '\x2', '(', ')', '\a', '\x6', '\x2', '\x2', ')', '*', '\a', 
		'\x1B', '\x2', '\x2', '*', '+', '\x5', '\x6', '\x4', '\x2', '+', ',', 
		'\a', '\x1C', '\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', 
		'\x31', '\x5', '\b', '\x5', '\x2', '.', '\x31', '\x5', '\n', '\x6', '\x2', 
		'/', '\x31', '\x5', '\x1E', '\x10', '\x2', '\x30', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\a', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x5', '\x1C', '\xF', '\x2', '\x36', 
		'\x39', '\a', '\x6', '\x2', '\x2', '\x37', '\x38', '\a', '\v', '\x2', 
		'\x2', '\x38', ':', '\x5', '\x16', '\f', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '!', '\x2', '\x2', '<', '\t', 
		'\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', '\x1C', '\xF', '\x2', '>', 
		'?', '\a', '\x6', '\x2', '\x2', '?', '\x41', '\a', '\x1D', '\x2', '\x2', 
		'@', '\x42', '\x5', '\f', '\a', '\x2', '\x41', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x1E', '\x2', '\x2', '\x44', 
		'\x45', '\x5', '\x10', '\t', '\x2', '\x45', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'K', '\x5', '\xE', '\b', '\x2', 'G', 'H', '\a', '\"', '\x2', 
		'\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 'I', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x1C', 
		'\xF', '\x2', 'O', 'P', '\a', '\x6', '\x2', '\x2', 'P', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'U', '\a', '\x1B', '\x2', '\x2', 'R', 'T', '\x5', 
		'\x12', '\n', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x1C', '\x2', '\x2', 'Y', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'r', '\x5', '\b', '\x5', '\x2', '[', 
		'r', '\x5', '\x14', '\v', '\x2', '\\', 'r', '\x5', '\x10', '\t', '\x2', 
		']', '^', '\a', '\x11', '\x2', '\x2', '^', '_', '\a', '\x1D', '\x2', '\x2', 
		'_', '`', '\x5', '\x16', '\f', '\x2', '`', '\x61', '\a', '\x1E', '\x2', 
		'\x2', '\x61', '\x64', '\x5', '\x12', '\n', '\x2', '\x62', '\x63', '\a', 
		'\x12', '\x2', '\x2', '\x63', '\x65', '\x5', '\x12', '\n', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'r', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x13', 
		'\x2', '\x2', 'g', 'h', '\a', '\x1D', '\x2', '\x2', 'h', 'i', '\x5', '\x16', 
		'\f', '\x2', 'i', 'j', '\a', '\x1E', '\x2', '\x2', 'j', 'k', '\x5', '\x12', 
		'\n', '\x2', 'k', 'r', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x14', 
		'\x2', '\x2', 'm', 'o', '\x5', '\x16', '\f', '\x2', 'n', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'r', '\a', '!', '\x2', '\x2', 'q', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'q', '[', '\x3', '\x2', '\x2', '\x2', 'q', '\\', '\x3', 
		'\x2', '\x2', '\x2', 'q', ']', '\x3', '\x2', '\x2', '\x2', 'q', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'l', '\x3', '\x2', '\x2', '\x2', 'r', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x5', '\x16', '\f', '\x2', 
		't', 'u', '\a', '!', '\x2', '\x2', 'u', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\b', '\f', '\x1', '\x2', 'w', 'x', '\a', '\x6', '\x2', '\x2', 
		'x', 'z', '\a', '\x1D', '\x2', '\x2', 'y', '{', '\x5', '\x18', '\r', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\x84', '\a', '\x1E', '\x2', 
		'\x2', '}', '\x84', '\a', '\x6', '\x2', '\x2', '~', '\x84', '\x5', '\x1A', 
		'\xE', '\x2', '\x7F', '\x80', '\a', '\x1D', '\x2', '\x2', '\x80', '\x81', 
		'\x5', '\x16', '\f', '\x2', '\x81', '\x82', '\a', '\x1E', '\x2', '\x2', 
		'\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', '\x2', '\x83', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\f', '\n', '\x2', 
		'\x2', '\x86', '\x87', '\a', '\xE', '\x2', '\x2', '\x87', '\x92', '\x5', 
		'\x16', '\f', '\v', '\x88', '\x89', '\f', '\t', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\r', '\x2', '\x2', '\x8A', '\x92', '\x5', '\x16', '\f', 
		'\n', '\x8B', '\x8C', '\f', '\b', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'\f', '\x2', '\x2', '\x8D', '\x92', '\x5', '\x16', '\f', '\t', '\x8E', 
		'\x8F', '\f', '\a', '\x2', '\x2', '\x8F', '\x90', '\a', '\xF', '\x2', 
		'\x2', '\x90', '\x92', '\x5', '\x16', '\f', '\b', '\x91', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x88', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x9B', '\x5', '\x16', '\f', '\x2', '\x97', '\x98', '\a', 
		'\"', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x16', '\f', '\x2', '\x99', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\t', '\x2', '\x2', 
		'\x2', '\x9F', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\b', 
		'\xF', '\x1', '\x2', '\xA1', '\xA8', '\a', '\x15', '\x2', '\x2', '\xA2', 
		'\xA8', '\a', '\x16', '\x2', '\x2', '\xA3', '\xA8', '\a', '\x17', '\x2', 
		'\x2', '\xA4', '\xA8', '\a', '\x18', '\x2', '\x2', '\xA5', '\xA8', '\a', 
		'\x19', '\x2', '\x2', '\xA6', '\xA8', '\a', '\x6', '\x2', '\x2', '\xA7', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\f', '\x3', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\x1F', '\x2', '\x2', '\xAB', '\xAD', '\a', ' ', '\x2', '\x2', '\xAC', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x10', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '\x6', '\x2', '\x2', '\xB3', '\xB7', '\a', 
		'\x1B', '\x2', '\x2', '\xB4', '\xB6', '\x5', '\b', '\x5', '\x2', '\xB5', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x1C', '\x2', 
		'\x2', '\xBB', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x14', '#', '\x30', 
		'\x32', '\x39', '\x41', 'K', 'U', '\x64', 'n', 'q', 'z', '\x83', '\x91', 
		'\x93', '\x9B', '\xA7', '\xAE', '\xB7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
