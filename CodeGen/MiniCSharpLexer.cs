//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/TEC/Compiladores3/ProyectoCompi/ProyectoCompi/Grammar/MiniCSharpLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using Antlr4.Runtime;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MiniCSharpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CLASS=1, IF=2, ELSE=3, WHILE=4, RETURN=5, INT_TYPE=6, CHAR_TYPE=7, DOUBLE_TYPE=8, 
		BOOL_TYPE=9, STRING_TYPE=10, ASSIGN=11, ADDOP=12, MULOP=13, RELOP=14, 
		LOGOP=15, LPAREN=16, RPAREN=17, LBRACE=18, RBRACE=19, LBRACK=20, RBRACK=21, 
		SEMICOLON=22, COMMA=23, INT=24, DOUBLE=25, CHAR=26, STRING=27, BOOL=28, 
		ID=29, COMMENT=30, LINE_COMMENT=31, WS=32;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CLASS", "IF", "ELSE", "WHILE", "RETURN", "INT_TYPE", "CHAR_TYPE", "DOUBLE_TYPE", 
		"BOOL_TYPE", "STRING_TYPE", "ASSIGN", "ADDOP", "MULOP", "RELOP", "LOGOP", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMICOLON", 
		"COMMA", "INT", "DOUBLE", "CHAR", "STRING", "BOOL", "ID", "COMMENT", "LINE_COMMENT", 
		"WS"
	};


	public MiniCSharpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'if'", "'else'", "'while'", "'return'", "'int'", "'char'", 
		"'double'", "'bool'", "'string'", "'='", null, null, null, null, "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CLASS", "IF", "ELSE", "WHILE", "RETURN", "INT_TYPE", "CHAR_TYPE", 
		"DOUBLE_TYPE", "BOOL_TYPE", "STRING_TYPE", "ASSIGN", "ADDOP", "MULOP", 
		"RELOP", "LOGOP", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMICOLON", "COMMA", "INT", "DOUBLE", "CHAR", "STRING", "BOOL", "ID", 
		"COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,250,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
		12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,137,8,13,1,14,
		1,14,1,14,1,14,3,14,143,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,5,23,163,8,23,10,23,12,
		23,166,9,23,1,23,3,23,169,8,23,1,24,4,24,172,8,24,11,24,12,24,173,1,24,
		1,24,4,24,178,8,24,11,24,12,24,179,1,25,1,25,1,25,1,25,3,25,186,8,25,1,
		25,1,25,1,26,1,26,1,26,1,26,5,26,194,8,26,10,26,12,26,197,9,26,1,26,1,
		26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,210,8,27,1,28,1,28,
		5,28,214,8,28,10,28,12,28,217,9,28,1,29,1,29,1,29,1,29,5,29,223,8,29,10,
		29,12,29,226,9,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,237,
		8,30,10,30,12,30,240,9,30,1,30,1,30,1,31,4,31,245,8,31,11,31,12,31,246,
		1,31,1,31,1,224,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,12,2,0,43,
		43,45,45,3,0,37,37,42,42,47,47,1,0,49,57,1,0,48,57,4,0,10,10,13,13,39,
		39,92,92,5,0,39,39,92,92,110,110,114,114,116,116,4,0,10,10,13,13,34,34,
		92,92,5,0,34,34,92,92,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,
		0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,267,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,71,
		1,0,0,0,5,74,1,0,0,0,7,79,1,0,0,0,9,85,1,0,0,0,11,92,1,0,0,0,13,96,1,0,
		0,0,15,101,1,0,0,0,17,108,1,0,0,0,19,113,1,0,0,0,21,120,1,0,0,0,23,122,
		1,0,0,0,25,124,1,0,0,0,27,136,1,0,0,0,29,142,1,0,0,0,31,144,1,0,0,0,33,
		146,1,0,0,0,35,148,1,0,0,0,37,150,1,0,0,0,39,152,1,0,0,0,41,154,1,0,0,
		0,43,156,1,0,0,0,45,158,1,0,0,0,47,168,1,0,0,0,49,171,1,0,0,0,51,181,1,
		0,0,0,53,189,1,0,0,0,55,209,1,0,0,0,57,211,1,0,0,0,59,218,1,0,0,0,61,232,
		1,0,0,0,63,244,1,0,0,0,65,66,5,99,0,0,66,67,5,108,0,0,67,68,5,97,0,0,68,
		69,5,115,0,0,69,70,5,115,0,0,70,2,1,0,0,0,71,72,5,105,0,0,72,73,5,102,
		0,0,73,4,1,0,0,0,74,75,5,101,0,0,75,76,5,108,0,0,76,77,5,115,0,0,77,78,
		5,101,0,0,78,6,1,0,0,0,79,80,5,119,0,0,80,81,5,104,0,0,81,82,5,105,0,0,
		82,83,5,108,0,0,83,84,5,101,0,0,84,8,1,0,0,0,85,86,5,114,0,0,86,87,5,101,
		0,0,87,88,5,116,0,0,88,89,5,117,0,0,89,90,5,114,0,0,90,91,5,110,0,0,91,
		10,1,0,0,0,92,93,5,105,0,0,93,94,5,110,0,0,94,95,5,116,0,0,95,12,1,0,0,
		0,96,97,5,99,0,0,97,98,5,104,0,0,98,99,5,97,0,0,99,100,5,114,0,0,100,14,
		1,0,0,0,101,102,5,100,0,0,102,103,5,111,0,0,103,104,5,117,0,0,104,105,
		5,98,0,0,105,106,5,108,0,0,106,107,5,101,0,0,107,16,1,0,0,0,108,109,5,
		98,0,0,109,110,5,111,0,0,110,111,5,111,0,0,111,112,5,108,0,0,112,18,1,
		0,0,0,113,114,5,115,0,0,114,115,5,116,0,0,115,116,5,114,0,0,116,117,5,
		105,0,0,117,118,5,110,0,0,118,119,5,103,0,0,119,20,1,0,0,0,120,121,5,61,
		0,0,121,22,1,0,0,0,122,123,7,0,0,0,123,24,1,0,0,0,124,125,7,1,0,0,125,
		26,1,0,0,0,126,127,5,61,0,0,127,137,5,61,0,0,128,129,5,33,0,0,129,137,
		5,61,0,0,130,137,5,60,0,0,131,132,5,60,0,0,132,137,5,61,0,0,133,137,5,
		62,0,0,134,135,5,62,0,0,135,137,5,61,0,0,136,126,1,0,0,0,136,128,1,0,0,
		0,136,130,1,0,0,0,136,131,1,0,0,0,136,133,1,0,0,0,136,134,1,0,0,0,137,
		28,1,0,0,0,138,139,5,38,0,0,139,143,5,38,0,0,140,141,5,124,0,0,141,143,
		5,124,0,0,142,138,1,0,0,0,142,140,1,0,0,0,143,30,1,0,0,0,144,145,5,40,
		0,0,145,32,1,0,0,0,146,147,5,41,0,0,147,34,1,0,0,0,148,149,5,123,0,0,149,
		36,1,0,0,0,150,151,5,125,0,0,151,38,1,0,0,0,152,153,5,91,0,0,153,40,1,
		0,0,0,154,155,5,93,0,0,155,42,1,0,0,0,156,157,5,59,0,0,157,44,1,0,0,0,
		158,159,5,44,0,0,159,46,1,0,0,0,160,164,7,2,0,0,161,163,7,3,0,0,162,161,
		1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,169,1,0,0,
		0,166,164,1,0,0,0,167,169,5,48,0,0,168,160,1,0,0,0,168,167,1,0,0,0,169,
		48,1,0,0,0,170,172,7,3,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,
		0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,177,5,46,0,0,176,178,7,3,0,0,177,
		176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,50,1,0,
		0,0,181,185,5,39,0,0,182,186,8,4,0,0,183,184,5,92,0,0,184,186,7,5,0,0,
		185,182,1,0,0,0,185,183,1,0,0,0,186,187,1,0,0,0,187,188,5,39,0,0,188,52,
		1,0,0,0,189,195,5,34,0,0,190,194,8,6,0,0,191,192,5,92,0,0,192,194,7,7,
		0,0,193,190,1,0,0,0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
		196,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,199,5,34,0,0,199,54,1,
		0,0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,117,0,0,203,210,5,
		101,0,0,204,205,5,102,0,0,205,206,5,97,0,0,206,207,5,108,0,0,207,208,5,
		115,0,0,208,210,5,101,0,0,209,200,1,0,0,0,209,204,1,0,0,0,210,56,1,0,0,
		0,211,215,7,8,0,0,212,214,7,9,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,
		213,1,0,0,0,215,216,1,0,0,0,216,58,1,0,0,0,217,215,1,0,0,0,218,219,5,47,
		0,0,219,220,5,42,0,0,220,224,1,0,0,0,221,223,9,0,0,0,222,221,1,0,0,0,223,
		226,1,0,0,0,224,225,1,0,0,0,224,222,1,0,0,0,225,227,1,0,0,0,226,224,1,
		0,0,0,227,228,5,42,0,0,228,229,5,47,0,0,229,230,1,0,0,0,230,231,6,29,0,
		0,231,60,1,0,0,0,232,233,5,47,0,0,233,234,5,47,0,0,234,238,1,0,0,0,235,
		237,8,10,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,
		0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,6,30,0,0,242,62,1,0,0,0,
		243,245,7,11,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,
		1,0,0,0,247,248,1,0,0,0,248,249,6,31,0,0,249,64,1,0,0,0,15,0,136,142,164,
		168,173,179,185,193,195,209,215,224,238,246,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
