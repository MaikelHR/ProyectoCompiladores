//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\TEC\Compiladores3\ProyectoCompi\ProyectoCompi\Grammar\MiniCSharpParser.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using Antlr4.Runtime;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniCSharpParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniCSharpParserBaseListener : IMiniCSharpParserListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>programRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgramRule([NotNull] MiniCSharpParser.ProgramRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>programRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgramRule([NotNull] MiniCSharpParser.ProgramRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>classDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>classDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>classBodyRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassBodyRule([NotNull] MiniCSharpParser.ClassBodyRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>classBodyRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassBodyRule([NotNull] MiniCSharpParser.ClassBodyRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] MiniCSharpParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] MiniCSharpParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>methodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>methodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterList([NotNull] MiniCSharpParser.ParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.paramList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterList([NotNull] MiniCSharpParser.ParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parameter</c>
	/// labeled alternative in <see cref="MiniCSharpParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] MiniCSharpParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parameter</c>
	/// labeled alternative in <see cref="MiniCSharpParser.param"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] MiniCSharpParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStmt([NotNull] MiniCSharpParser.BlockStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStmt([NotNull] MiniCSharpParser.BlockStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableStatement([NotNull] MiniCSharpParser.VariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableStatement([NotNull] MiniCSharpParser.VariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStmt([NotNull] MiniCSharpParser.ExpressionStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStmt([NotNull] MiniCSharpParser.ExpressionStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.exprStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] MiniCSharpParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.exprStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] MiniCSharpParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifier</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] MiniCSharpParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifier</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] MiniCSharpParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] MiniCSharpParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] MiniCSharpParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] MiniCSharpParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] MiniCSharpParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpression([NotNull] MiniCSharpParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpression([NotNull] MiniCSharpParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] MiniCSharpParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] MiniCSharpParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] MiniCSharpParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] MiniCSharpParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalExpression([NotNull] MiniCSharpParser.LogicalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalExpression([NotNull] MiniCSharpParser.LogicalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodCall([NotNull] MiniCSharpParser.MethodCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodCall([NotNull] MiniCSharpParser.MethodCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>argumentList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] MiniCSharpParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>argumentList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] MiniCSharpParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerLiteral([NotNull] MiniCSharpParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerLiteral([NotNull] MiniCSharpParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleLiteral([NotNull] MiniCSharpParser.DoubleLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleLiteral([NotNull] MiniCSharpParser.DoubleLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>charLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharLiteral([NotNull] MiniCSharpParser.CharLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>charLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharLiteral([NotNull] MiniCSharpParser.CharLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] MiniCSharpParser.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] MiniCSharpParser.StringLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteral([NotNull] MiniCSharpParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteral([NotNull] MiniCSharpParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharType([NotNull] MiniCSharpParser.CharTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharType([NotNull] MiniCSharpParser.CharTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>doubleType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleType([NotNull] MiniCSharpParser.DoubleTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>doubleType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleType([NotNull] MiniCSharpParser.DoubleTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayType([NotNull] MiniCSharpParser.ArrayTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayType([NotNull] MiniCSharpParser.ArrayTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntType([NotNull] MiniCSharpParser.IntTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntType([NotNull] MiniCSharpParser.IntTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringType([NotNull] MiniCSharpParser.StringTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringType([NotNull] MiniCSharpParser.StringTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolType([NotNull] MiniCSharpParser.BoolTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolType([NotNull] MiniCSharpParser.BoolTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>classType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassType([NotNull] MiniCSharpParser.ClassTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>classType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassType([NotNull] MiniCSharpParser.ClassTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>innerClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.innerClassDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInnerClassDeclaration([NotNull] MiniCSharpParser.InnerClassDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>innerClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.innerClassDecl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInnerClassDeclaration([NotNull] MiniCSharpParser.InnerClassDeclarationContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
