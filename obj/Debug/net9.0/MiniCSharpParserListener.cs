//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\TEC\Compiladores3\ProyectoCompi\ProyectoCompi\Grammar\MiniCSharpParser.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using Antlr4.Runtime;

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniCSharpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public interface IMiniCSharpParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>programRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramRule([NotNull] MiniCSharpParser.ProgramRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>programRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramRule([NotNull] MiniCSharpParser.ProgramRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclaration([NotNull] MiniCSharpParser.ClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classBodyRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassBodyRule([NotNull] MiniCSharpParser.ClassBodyRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classBodyRule</c>
	/// labeled alternative in <see cref="MiniCSharpParser.classBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassBodyRule([NotNull] MiniCSharpParser.ClassBodyRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] MiniCSharpParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] MiniCSharpParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>methodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>methodDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclaration([NotNull] MiniCSharpParser.MethodDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] MiniCSharpParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parameterList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] MiniCSharpParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parameter</c>
	/// labeled alternative in <see cref="MiniCSharpParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] MiniCSharpParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parameter</c>
	/// labeled alternative in <see cref="MiniCSharpParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] MiniCSharpParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStmt([NotNull] MiniCSharpParser.BlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStmt([NotNull] MiniCSharpParser.BlockStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableStatement([NotNull] MiniCSharpParser.VariableStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableStatement([NotNull] MiniCSharpParser.VariableStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStmt([NotNull] MiniCSharpParser.ExpressionStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStmt([NotNull] MiniCSharpParser.ExpressionStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] MiniCSharpParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] MiniCSharpParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] MiniCSharpParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] MiniCSharpParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.exprStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] MiniCSharpParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="MiniCSharpParser.exprStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] MiniCSharpParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifier</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] MiniCSharpParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifier</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] MiniCSharpParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] MiniCSharpParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesizedExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] MiniCSharpParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] MiniCSharpParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] MiniCSharpParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] MiniCSharpParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] MiniCSharpParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] MiniCSharpParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] MiniCSharpParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] MiniCSharpParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] MiniCSharpParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpression([NotNull] MiniCSharpParser.LogicalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalExpression</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpression([NotNull] MiniCSharpParser.LogicalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCall([NotNull] MiniCSharpParser.MethodCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="MiniCSharpParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCall([NotNull] MiniCSharpParser.MethodCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>argumentList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] MiniCSharpParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>argumentList</c>
	/// labeled alternative in <see cref="MiniCSharpParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] MiniCSharpParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] MiniCSharpParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] MiniCSharpParser.IntegerLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleLiteral([NotNull] MiniCSharpParser.DoubleLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>doubleLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleLiteral([NotNull] MiniCSharpParser.DoubleLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>charLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharLiteral([NotNull] MiniCSharpParser.CharLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>charLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharLiteral([NotNull] MiniCSharpParser.CharLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] MiniCSharpParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] MiniCSharpParser.StringLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] MiniCSharpParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MiniCSharpParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] MiniCSharpParser.BooleanLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharType([NotNull] MiniCSharpParser.CharTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>charType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharType([NotNull] MiniCSharpParser.CharTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>doubleType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoubleType([NotNull] MiniCSharpParser.DoubleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>doubleType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoubleType([NotNull] MiniCSharpParser.DoubleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] MiniCSharpParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] MiniCSharpParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntType([NotNull] MiniCSharpParser.IntTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntType([NotNull] MiniCSharpParser.IntTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringType([NotNull] MiniCSharpParser.StringTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringType([NotNull] MiniCSharpParser.StringTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolType([NotNull] MiniCSharpParser.BoolTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolType([NotNull] MiniCSharpParser.BoolTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>classType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassType([NotNull] MiniCSharpParser.ClassTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>classType</c>
	/// labeled alternative in <see cref="MiniCSharpParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassType([NotNull] MiniCSharpParser.ClassTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>innerClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.innerClassDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInnerClassDeclaration([NotNull] MiniCSharpParser.InnerClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>innerClassDeclaration</c>
	/// labeled alternative in <see cref="MiniCSharpParser.innerClassDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInnerClassDeclaration([NotNull] MiniCSharpParser.InnerClassDeclarationContext context);
}
